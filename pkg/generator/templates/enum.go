package templates

const EnumTemplate = `
// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

package {{ .Package }}

import "github.com/lumina-tech/gooq/pkg/gooq"

{{ range $_, $enum := .Enums -}}
{{- $type := (snakeToCamelID $enum.Name) -}}
type {{ $type }} string

const (
{{- range $enum.Values }}
	{{ $type }}{{ snakeToCamelID .EnumValue }} = {{ $type }}("{{ .EnumValue }}")
{{- end }}
	{{ $type }}Null = {{ $type }}("")
)

// String returns the string value of the {{ $type }}.
func (enumType {{ $type }}) String() string {
	return string(enumType)
}

// MarshalText marshals {{ $type }} into text.
func (enumType {{ $type }}) MarshalText() ([]byte, error) {
	return []byte(enumType.String()), nil
}

// UnmarshalText unmarshals {{ $type }} from text.
func (enumType *{{ $type }}) UnmarshalText(text []byte) error {
	switch string(text)	{
{{- range $enum.Values }}
	case "{{ .EnumValue }}":
		*enumType = {{ $type }}{{ snakeToCamelID .EnumValue }}
{{- end }}
	default:
		*enumType = {{ $type }}Null
	}
	return nil
}

// MarshalGQL satisfies gqlgen interface for {{ $type }}.
func (enumType {{ $type }}) MarshalGQL(w io.Writer) {
	if enumType == {{ $type }}Null {
		io.WriteString(w, "null")
	} else {
		io.WriteString(w, strconv.Quote(enumType.String()))
	}
}

// UnmarshalText satisfies gqlgen interface for {{ $type }}.
func (enumType *{{ $type }}) UnmarshalGQL(v interface{}) error {
	switch str := v.(type) {
	case string:
		return enumType.UnmarshalText([]byte(str))
	case nil:
		return nil
	default:
		return fmt.Errorf("invalid enum value %v", v)
	}
}

// Value satisfies the sql/driver.Valuer interface for {{ $type }}.
func (enumType {{ $type }}) Value() (driver.Value, error) {
	if enumType == {{ $type }}Null {
		return nil, nil
	}
	return enumType.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for {{ $type }}.
func (enumType *{{ $type }}) Scan(src interface{}) error {
	switch buf := src.(type) {
	case []byte:
		return enumType.UnmarshalText(buf)
	case string:
		return enumType.UnmarshalText([]byte(buf))
	case nil:
		return nil
	default:
	   return errors.New("invalid {{ $type }}")
  }
}

{{ if $enum.IsReferenceTable }}
var {{ $type }}ReferenceEntriesMap map[{{ $type }}]*{{ $enum.ReferenceTableModelType }}

func (enumType *{{ $type }}) GetReferenceEntry() *{{ $enum.ReferenceTableModelType }} {
  return {{ $type }}ReferenceEntriesMap[*enumType]
}
{{end}}

{{ end }}
`
