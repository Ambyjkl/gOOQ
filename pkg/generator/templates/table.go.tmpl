// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

{{ $schema := .Schema }}
package {{ .Package }}

{{ range $_, $table := .Tables -}}

type {{ $table.Name }}Constraints struct {
  {{ range $_, $f := $table.Constraints -}}
  {{ snakeToCamelID $f.Name }} gooq.DatabaseConstraint
  {{ end }}
}

type {{ $table.Name }} struct {
  {{ range $_, $f := $table.Fields -}}
  {{ snakeToCamelID $f.Name }} gooq.{{ $f.GooqType }}Field
  {{ end }}
  Constraints *{{ $table.Name }}Constraints
  alias null.String
}

func new{{ snakeToCamelID $table.Name }}Constraints() *{{ $table.Name }}Constraints {
  constraints := &{{ $table.Name }}Constraints{}
  {{ range $_, $f := $table.Constraints -}}
  constraints.{{ snakeToCamelID $f.Name }} = gooq.DatabaseConstraint{
    Name: "{{$f.Name}}",
    Predicate: null.NewString("{{$f.Predicate.String}}", {{$f.Predicate.Valid}}),
  }
  {{ end -}}
  return constraints
}

func new{{ $table.ModelType }}() *{{ $table.Name }} {
  instance := &{{ $table.Name }}{}
  {{ range $_, $f := $table.Fields -}}
  instance.{{ snakeToCamelID $f.Name }} = gooq.New{{ $f.GooqType }}Field(instance, "{{ snakeToCamelID $f.Name }}")
  {{ end -}}
  instance.Constraints = new{{ $table.ModelType }}Constraints()
  return instance
}

func (t *{{ $table.Name }}) As(alias string) gooq.Selectable {
  instance := new{{ $table.ModelType }}()
  instance.alias = null.StringFrom(alias)
  return instance
}

func (t *{{ $table.Name }}) GetAlias() null.String {
  return t.alias
}

func (t *{{ $table.Name }}) GetAliasOrName() string {
  if t.alias.Valid {
    return t.alias.String
  }
  return t.GetName()
}

func (t *{{ $table.Name }}) GetName() string {
  return gooq.GetQualifiedName("{{ $schema }}", "{{ $table.Name }}")
}

func (t *{{ $table.Name }}) GetSchema() null.String {
  return "{{ $schema }}"
}

func (t *{{ $table.Name }}) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*{{ $table.ModelTypeWithPackage }}, error) {
	result := {{ $table.ModelTypeWithPackage }}{}
	if err := gooq.ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *{{ $table.Name }}) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]{{ $table.ModelTypeWithPackage }}, error) {
	results := []{{ $table.ModelTypeWithPackage }}{}
	if err := gooq.ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

var {{ $table.ModelTableName }} = new{{ snakeToCamelID $table.Name }}()
{{ end }}
