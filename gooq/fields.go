// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

package gooq

import (
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
	"gopkg.in/guregu/null.v3"

	"github.com/lumina-tech/lumina/apps/server/pkg/gooq/nullable"
)

type Functional interface {
	ArrayAgg() Field

	Asc() Field

	Avg() Field

	Cast(_0 interface{}) Field

	Ceil() Field

	Coalesce(_0 interface{}) Field

	Count() Field

	Date() Field

	DateTrunc(_0 interface{}) Field

	Desc() Field

	Distinct() Field

	Div(_0 interface{}) Field

	Mult(_0 interface{}) Field

	Hex() Field

	Lower() Field

	Max() Field

	Md5() Field

	Min() Field

	First(_0 interface{}) Field

	Last(_0 interface{}) Field

	Substr2(_0 interface{}) Field

	Substr3(_0, _1 interface{}) Field

	Sum() Field

	Upper() Field
}

func (s *selection) BoolField(name string) BoolField {
	return &boolField{name: name}
}

func (s *selection) Float32Field(name string) Float32Field {
	return &float32Field{name: name}
}

func (s *selection) Float64Field(name string) Float64Field {
	return &float64Field{name: name}
}

func (s *selection) IntField(name string) IntField {
	return &intField{name: name}
}

func (s *selection) Int64Field(name string) Int64Field {
	return &int64Field{name: name}
}

func (s *selection) JsonbField(name string) JsonbField {
	return &jsonbField{name: name}
}

func (s *selection) StringField(name string) StringField {
	return &stringField{name: name}
}

func (s *selection) StringArrayField(name string) StringArrayField {
	return &stringarrayField{name: name}
}

func (s *selection) TimeField(name string) TimeField {
	return &timeField{name: name}
}

func (s *selection) UUIDField(name string) UUIDField {
	return &uuidField{name: name}
}

func (s *selection) NullBoolField(name string) NullBoolField {
	return &nullboolField{name: name}
}

func (s *selection) NullFloat32Field(name string) NullFloat32Field {
	return &nullfloat32Field{name: name}
}

func (s *selection) NullFloat64Field(name string) NullFloat64Field {
	return &nullfloat64Field{name: name}
}

func (s *selection) NullIntField(name string) NullIntField {
	return &nullintField{name: name}
}

func (s *selection) NullInt64Field(name string) NullInt64Field {
	return &nullint64Field{name: name}
}

func (s *selection) NullJsonbField(name string) NullJsonbField {
	return &nulljsonbField{name: name}
}

func (s *selection) NullStringField(name string) NullStringField {
	return &nullstringField{name: name}
}

func (s *selection) NullTimeField(name string) NullTimeField {
	return &nulltimeField{name: name}
}

func (s *selection) NullUUIDField(name string) NullUUIDField {
	return &nulluuidField{name: name}
}

/////

type boolField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type BoolField interface {
	TableField

	Eq(value bool) Condition
	IsEq(value BoolField) JoinCondition

	Gt(value bool) Condition
	IsGt(value BoolField) JoinCondition

	Gte(value bool) Condition
	IsGte(value BoolField) JoinCondition

	ILike(value bool) Condition
	IsILike(value BoolField) JoinCondition

	Like(value bool) Condition
	IsLike(value BoolField) JoinCondition

	Lt(value bool) Condition
	IsLt(value BoolField) JoinCondition

	Lte(value bool) Condition
	IsLte(value BoolField) JoinCondition

	NotEq(value bool) Condition
	IsNotEq(value BoolField) JoinCondition

	NotILike(value bool) Condition
	IsNotILike(value BoolField) JoinCondition

	NotLike(value bool) Condition
	IsNotLike(value BoolField) JoinCondition

	NotSimilar(value bool) Condition
	IsNotSimilar(value BoolField) JoinCondition

	Simiar(value bool) Condition
	IsSimilar(value BoolField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []bool) Condition
	NotIn(value []bool) Condition
}

func (c *boolField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *boolField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &boolField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &boolField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *boolField) FilterWhere(filters ...Condition) Field {
	return &boolField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *boolField) As(alias string) Field {
	return &boolField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *boolField) Alias() string {
	return c.alias
}

func (c *boolField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *boolField) Name() string {
	return c.name
}

func (c *boolField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *boolField) Parent() Selectable {
	return c.selection
}

func (c *boolField) Filters() []Condition {
	return c.filters
}

// --

func (c *boolField) Eq(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *boolField) IsEq(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *boolField) Gt(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *boolField) IsGt(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *boolField) Gte(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *boolField) IsGte(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *boolField) ILike(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *boolField) IsILike(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *boolField) Like(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *boolField) IsLike(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *boolField) Lt(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *boolField) IsLt(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *boolField) Lte(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *boolField) IsLte(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *boolField) NotEq(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *boolField) IsNotEq(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *boolField) NotILike(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *boolField) IsNotILike(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *boolField) NotLike(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *boolField) IsNotLike(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *boolField) NotSimilar(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *boolField) IsNotSimilar(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *boolField) Simiar(pred bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *boolField) IsSimilar(pred BoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *boolField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *boolField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *boolField) In(pred []bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *boolField) NotIn(pred []bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func Bool(s Selectable, name string) BoolField {
	return &boolField{name: name, selection: s}
}

//////

func (c *boolField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *boolField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *boolField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *boolField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *boolField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *boolField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *boolField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *boolField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *boolField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *boolField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *boolField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *boolField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *boolField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *boolField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *boolField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *boolField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *boolField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *boolField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *boolField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *boolField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *boolField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *boolField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *boolField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *boolField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type float32Field struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type Float32Field interface {
	TableField

	Eq(value float32) Condition
	IsEq(value Float32Field) JoinCondition

	Gt(value float32) Condition
	IsGt(value Float32Field) JoinCondition

	Gte(value float32) Condition
	IsGte(value Float32Field) JoinCondition

	ILike(value float32) Condition
	IsILike(value Float32Field) JoinCondition

	Like(value float32) Condition
	IsLike(value Float32Field) JoinCondition

	Lt(value float32) Condition
	IsLt(value Float32Field) JoinCondition

	Lte(value float32) Condition
	IsLte(value Float32Field) JoinCondition

	NotEq(value float32) Condition
	IsNotEq(value Float32Field) JoinCondition

	NotILike(value float32) Condition
	IsNotILike(value Float32Field) JoinCondition

	NotLike(value float32) Condition
	IsNotLike(value Float32Field) JoinCondition

	NotSimilar(value float32) Condition
	IsNotSimilar(value Float32Field) JoinCondition

	Simiar(value float32) Condition
	IsSimilar(value Float32Field) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []float32) Condition
	NotIn(value []float32) Condition
}

func (c *float32Field) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *float32Field) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &float32Field{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &float32Field{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *float32Field) FilterWhere(filters ...Condition) Field {
	return &float32Field{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *float32Field) As(alias string) Field {
	return &float32Field{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *float32Field) Alias() string {
	return c.alias
}

func (c *float32Field) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *float32Field) Name() string {
	return c.name
}

func (c *float32Field) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *float32Field) Parent() Selectable {
	return c.selection
}

func (c *float32Field) Filters() []Condition {
	return c.filters
}

// --

func (c *float32Field) Eq(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *float32Field) IsEq(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *float32Field) Gt(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *float32Field) IsGt(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *float32Field) Gte(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *float32Field) IsGte(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *float32Field) ILike(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *float32Field) IsILike(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *float32Field) Like(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *float32Field) IsLike(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *float32Field) Lt(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *float32Field) IsLt(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *float32Field) Lte(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *float32Field) IsLte(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *float32Field) NotEq(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *float32Field) IsNotEq(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *float32Field) NotILike(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *float32Field) IsNotILike(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *float32Field) NotLike(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *float32Field) IsNotLike(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *float32Field) NotSimilar(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *float32Field) IsNotSimilar(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *float32Field) Simiar(pred float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *float32Field) IsSimilar(pred Float32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *float32Field) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *float32Field) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *float32Field) In(pred []float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *float32Field) NotIn(pred []float32) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func Float32(s Selectable, name string) Float32Field {
	return &float32Field{name: name, selection: s}
}

//////

func (c *float32Field) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *float32Field) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *float32Field) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *float32Field) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *float32Field) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *float32Field) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *float32Field) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *float32Field) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *float32Field) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *float32Field) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *float32Field) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *float32Field) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *float32Field) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *float32Field) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *float32Field) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *float32Field) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *float32Field) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *float32Field) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *float32Field) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *float32Field) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *float32Field) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *float32Field) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *float32Field) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *float32Field) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type float64Field struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type Float64Field interface {
	TableField

	Eq(value float64) Condition
	IsEq(value Float64Field) JoinCondition

	Gt(value float64) Condition
	IsGt(value Float64Field) JoinCondition

	Gte(value float64) Condition
	IsGte(value Float64Field) JoinCondition

	ILike(value float64) Condition
	IsILike(value Float64Field) JoinCondition

	Like(value float64) Condition
	IsLike(value Float64Field) JoinCondition

	Lt(value float64) Condition
	IsLt(value Float64Field) JoinCondition

	Lte(value float64) Condition
	IsLte(value Float64Field) JoinCondition

	NotEq(value float64) Condition
	IsNotEq(value Float64Field) JoinCondition

	NotILike(value float64) Condition
	IsNotILike(value Float64Field) JoinCondition

	NotLike(value float64) Condition
	IsNotLike(value Float64Field) JoinCondition

	NotSimilar(value float64) Condition
	IsNotSimilar(value Float64Field) JoinCondition

	Simiar(value float64) Condition
	IsSimilar(value Float64Field) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []float64) Condition
	NotIn(value []float64) Condition
}

func (c *float64Field) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *float64Field) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &float64Field{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &float64Field{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *float64Field) FilterWhere(filters ...Condition) Field {
	return &float64Field{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *float64Field) As(alias string) Field {
	return &float64Field{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *float64Field) Alias() string {
	return c.alias
}

func (c *float64Field) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *float64Field) Name() string {
	return c.name
}

func (c *float64Field) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *float64Field) Parent() Selectable {
	return c.selection
}

func (c *float64Field) Filters() []Condition {
	return c.filters
}

// --

func (c *float64Field) Eq(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *float64Field) IsEq(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *float64Field) Gt(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *float64Field) IsGt(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *float64Field) Gte(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *float64Field) IsGte(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *float64Field) ILike(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *float64Field) IsILike(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *float64Field) Like(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *float64Field) IsLike(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *float64Field) Lt(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *float64Field) IsLt(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *float64Field) Lte(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *float64Field) IsLte(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *float64Field) NotEq(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *float64Field) IsNotEq(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *float64Field) NotILike(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *float64Field) IsNotILike(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *float64Field) NotLike(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *float64Field) IsNotLike(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *float64Field) NotSimilar(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *float64Field) IsNotSimilar(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *float64Field) Simiar(pred float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *float64Field) IsSimilar(pred Float64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *float64Field) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *float64Field) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *float64Field) In(pred []float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *float64Field) NotIn(pred []float64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func Float64(s Selectable, name string) Float64Field {
	return &float64Field{name: name, selection: s}
}

//////

func (c *float64Field) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *float64Field) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *float64Field) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *float64Field) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *float64Field) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *float64Field) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *float64Field) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *float64Field) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *float64Field) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *float64Field) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *float64Field) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *float64Field) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *float64Field) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *float64Field) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *float64Field) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *float64Field) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *float64Field) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *float64Field) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *float64Field) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *float64Field) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *float64Field) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *float64Field) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *float64Field) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *float64Field) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type intField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type IntField interface {
	TableField

	Eq(value int) Condition
	IsEq(value IntField) JoinCondition

	Gt(value int) Condition
	IsGt(value IntField) JoinCondition

	Gte(value int) Condition
	IsGte(value IntField) JoinCondition

	ILike(value int) Condition
	IsILike(value IntField) JoinCondition

	Like(value int) Condition
	IsLike(value IntField) JoinCondition

	Lt(value int) Condition
	IsLt(value IntField) JoinCondition

	Lte(value int) Condition
	IsLte(value IntField) JoinCondition

	NotEq(value int) Condition
	IsNotEq(value IntField) JoinCondition

	NotILike(value int) Condition
	IsNotILike(value IntField) JoinCondition

	NotLike(value int) Condition
	IsNotLike(value IntField) JoinCondition

	NotSimilar(value int) Condition
	IsNotSimilar(value IntField) JoinCondition

	Simiar(value int) Condition
	IsSimilar(value IntField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []int) Condition
	NotIn(value []int) Condition
}

func (c *intField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *intField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &intField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &intField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *intField) FilterWhere(filters ...Condition) Field {
	return &intField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *intField) As(alias string) Field {
	return &intField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *intField) Alias() string {
	return c.alias
}

func (c *intField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *intField) Name() string {
	return c.name
}

func (c *intField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *intField) Parent() Selectable {
	return c.selection
}

func (c *intField) Filters() []Condition {
	return c.filters
}

// --

func (c *intField) Eq(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *intField) IsEq(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *intField) Gt(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *intField) IsGt(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *intField) Gte(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *intField) IsGte(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *intField) ILike(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *intField) IsILike(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *intField) Like(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *intField) IsLike(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *intField) Lt(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *intField) IsLt(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *intField) Lte(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *intField) IsLte(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *intField) NotEq(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *intField) IsNotEq(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *intField) NotILike(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *intField) IsNotILike(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *intField) NotLike(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *intField) IsNotLike(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *intField) NotSimilar(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *intField) IsNotSimilar(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *intField) Simiar(pred int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *intField) IsSimilar(pred IntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *intField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *intField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *intField) In(pred []int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *intField) NotIn(pred []int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func Int(s Selectable, name string) IntField {
	return &intField{name: name, selection: s}
}

//////

func (c *intField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *intField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *intField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *intField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *intField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *intField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *intField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *intField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *intField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *intField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *intField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *intField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *intField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *intField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *intField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *intField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *intField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *intField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *intField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *intField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *intField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *intField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *intField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *intField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type int64Field struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type Int64Field interface {
	TableField

	Eq(value int64) Condition
	IsEq(value Int64Field) JoinCondition

	Gt(value int64) Condition
	IsGt(value Int64Field) JoinCondition

	Gte(value int64) Condition
	IsGte(value Int64Field) JoinCondition

	ILike(value int64) Condition
	IsILike(value Int64Field) JoinCondition

	Like(value int64) Condition
	IsLike(value Int64Field) JoinCondition

	Lt(value int64) Condition
	IsLt(value Int64Field) JoinCondition

	Lte(value int64) Condition
	IsLte(value Int64Field) JoinCondition

	NotEq(value int64) Condition
	IsNotEq(value Int64Field) JoinCondition

	NotILike(value int64) Condition
	IsNotILike(value Int64Field) JoinCondition

	NotLike(value int64) Condition
	IsNotLike(value Int64Field) JoinCondition

	NotSimilar(value int64) Condition
	IsNotSimilar(value Int64Field) JoinCondition

	Simiar(value int64) Condition
	IsSimilar(value Int64Field) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []int64) Condition
	NotIn(value []int64) Condition
}

func (c *int64Field) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *int64Field) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &int64Field{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &int64Field{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *int64Field) FilterWhere(filters ...Condition) Field {
	return &int64Field{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *int64Field) As(alias string) Field {
	return &int64Field{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *int64Field) Alias() string {
	return c.alias
}

func (c *int64Field) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *int64Field) Name() string {
	return c.name
}

func (c *int64Field) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *int64Field) Parent() Selectable {
	return c.selection
}

func (c *int64Field) Filters() []Condition {
	return c.filters
}

// --

func (c *int64Field) Eq(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *int64Field) IsEq(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *int64Field) Gt(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *int64Field) IsGt(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *int64Field) Gte(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *int64Field) IsGte(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *int64Field) ILike(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *int64Field) IsILike(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *int64Field) Like(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *int64Field) IsLike(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *int64Field) Lt(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *int64Field) IsLt(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *int64Field) Lte(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *int64Field) IsLte(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *int64Field) NotEq(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *int64Field) IsNotEq(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *int64Field) NotILike(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *int64Field) IsNotILike(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *int64Field) NotLike(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *int64Field) IsNotLike(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *int64Field) NotSimilar(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *int64Field) IsNotSimilar(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *int64Field) Simiar(pred int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *int64Field) IsSimilar(pred Int64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *int64Field) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *int64Field) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *int64Field) In(pred []int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *int64Field) NotIn(pred []int64) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func Int64(s Selectable, name string) Int64Field {
	return &int64Field{name: name, selection: s}
}

//////

func (c *int64Field) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *int64Field) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *int64Field) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *int64Field) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *int64Field) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *int64Field) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *int64Field) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *int64Field) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *int64Field) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *int64Field) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *int64Field) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *int64Field) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *int64Field) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *int64Field) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *int64Field) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *int64Field) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *int64Field) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *int64Field) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *int64Field) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *int64Field) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *int64Field) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *int64Field) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *int64Field) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *int64Field) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type jsonbField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type JsonbField interface {
	TableField

	Eq(value []byte) Condition
	IsEq(value JsonbField) JoinCondition

	Gt(value []byte) Condition
	IsGt(value JsonbField) JoinCondition

	Gte(value []byte) Condition
	IsGte(value JsonbField) JoinCondition

	ILike(value []byte) Condition
	IsILike(value JsonbField) JoinCondition

	Like(value []byte) Condition
	IsLike(value JsonbField) JoinCondition

	Lt(value []byte) Condition
	IsLt(value JsonbField) JoinCondition

	Lte(value []byte) Condition
	IsLte(value JsonbField) JoinCondition

	NotEq(value []byte) Condition
	IsNotEq(value JsonbField) JoinCondition

	NotILike(value []byte) Condition
	IsNotILike(value JsonbField) JoinCondition

	NotLike(value []byte) Condition
	IsNotLike(value JsonbField) JoinCondition

	NotSimilar(value []byte) Condition
	IsNotSimilar(value JsonbField) JoinCondition

	Simiar(value []byte) Condition
	IsSimilar(value JsonbField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value [][]byte) Condition
	NotIn(value [][]byte) Condition
}

func (c *jsonbField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *jsonbField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &jsonbField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &jsonbField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *jsonbField) FilterWhere(filters ...Condition) Field {
	return &jsonbField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *jsonbField) As(alias string) Field {
	return &jsonbField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *jsonbField) Alias() string {
	return c.alias
}

func (c *jsonbField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *jsonbField) Name() string {
	return c.name
}

func (c *jsonbField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *jsonbField) Parent() Selectable {
	return c.selection
}

func (c *jsonbField) Filters() []Condition {
	return c.filters
}

// --

func (c *jsonbField) Eq(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *jsonbField) IsEq(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *jsonbField) Gt(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *jsonbField) IsGt(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *jsonbField) Gte(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *jsonbField) IsGte(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *jsonbField) ILike(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *jsonbField) IsILike(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *jsonbField) Like(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *jsonbField) IsLike(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *jsonbField) Lt(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *jsonbField) IsLt(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *jsonbField) Lte(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *jsonbField) IsLte(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *jsonbField) NotEq(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *jsonbField) IsNotEq(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *jsonbField) NotILike(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *jsonbField) IsNotILike(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *jsonbField) NotLike(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *jsonbField) IsNotLike(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *jsonbField) NotSimilar(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *jsonbField) IsNotSimilar(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *jsonbField) Simiar(pred []byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *jsonbField) IsSimilar(pred JsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *jsonbField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *jsonbField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *jsonbField) In(pred [][]byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *jsonbField) NotIn(pred [][]byte) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func Jsonb(s Selectable, name string) JsonbField {
	return &jsonbField{name: name, selection: s}
}

//////

func (c *jsonbField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *jsonbField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *jsonbField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *jsonbField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *jsonbField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *jsonbField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *jsonbField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *jsonbField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *jsonbField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *jsonbField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *jsonbField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *jsonbField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *jsonbField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *jsonbField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *jsonbField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *jsonbField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *jsonbField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *jsonbField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *jsonbField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *jsonbField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *jsonbField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *jsonbField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *jsonbField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *jsonbField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type stringField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type StringField interface {
	TableField

	Eq(value string) Condition
	IsEq(value StringField) JoinCondition

	Gt(value string) Condition
	IsGt(value StringField) JoinCondition

	Gte(value string) Condition
	IsGte(value StringField) JoinCondition

	ILike(value string) Condition
	IsILike(value StringField) JoinCondition

	Like(value string) Condition
	IsLike(value StringField) JoinCondition

	Lt(value string) Condition
	IsLt(value StringField) JoinCondition

	Lte(value string) Condition
	IsLte(value StringField) JoinCondition

	NotEq(value string) Condition
	IsNotEq(value StringField) JoinCondition

	NotILike(value string) Condition
	IsNotILike(value StringField) JoinCondition

	NotLike(value string) Condition
	IsNotLike(value StringField) JoinCondition

	NotSimilar(value string) Condition
	IsNotSimilar(value StringField) JoinCondition

	Simiar(value string) Condition
	IsSimilar(value StringField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []string) Condition
	NotIn(value []string) Condition
}

func (c *stringField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *stringField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &stringField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &stringField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *stringField) FilterWhere(filters ...Condition) Field {
	return &stringField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *stringField) As(alias string) Field {
	return &stringField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *stringField) Alias() string {
	return c.alias
}

func (c *stringField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *stringField) Name() string {
	return c.name
}

func (c *stringField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *stringField) Parent() Selectable {
	return c.selection
}

func (c *stringField) Filters() []Condition {
	return c.filters
}

// --

func (c *stringField) Eq(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *stringField) IsEq(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *stringField) Gt(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *stringField) IsGt(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *stringField) Gte(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *stringField) IsGte(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *stringField) ILike(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *stringField) IsILike(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *stringField) Like(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *stringField) IsLike(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *stringField) Lt(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *stringField) IsLt(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *stringField) Lte(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *stringField) IsLte(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *stringField) NotEq(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *stringField) IsNotEq(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *stringField) NotILike(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *stringField) IsNotILike(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *stringField) NotLike(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *stringField) IsNotLike(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *stringField) NotSimilar(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *stringField) IsNotSimilar(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *stringField) Simiar(pred string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *stringField) IsSimilar(pred StringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *stringField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *stringField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *stringField) In(pred []string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *stringField) NotIn(pred []string) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func String(s Selectable, name string) StringField {
	return &stringField{name: name, selection: s}
}

//////

func (c *stringField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *stringField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *stringField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *stringField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *stringField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *stringField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *stringField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *stringField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *stringField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *stringField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *stringField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *stringField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *stringField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *stringField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *stringField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *stringField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *stringField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *stringField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *stringField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *stringField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *stringField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *stringField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *stringField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *stringField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type stringarrayField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type StringArrayField interface {
	TableField

	Eq(value pq.StringArray) Condition
	IsEq(value StringArrayField) JoinCondition

	Gt(value pq.StringArray) Condition
	IsGt(value StringArrayField) JoinCondition

	Gte(value pq.StringArray) Condition
	IsGte(value StringArrayField) JoinCondition

	ILike(value pq.StringArray) Condition
	IsILike(value StringArrayField) JoinCondition

	Like(value pq.StringArray) Condition
	IsLike(value StringArrayField) JoinCondition

	Lt(value pq.StringArray) Condition
	IsLt(value StringArrayField) JoinCondition

	Lte(value pq.StringArray) Condition
	IsLte(value StringArrayField) JoinCondition

	NotEq(value pq.StringArray) Condition
	IsNotEq(value StringArrayField) JoinCondition

	NotILike(value pq.StringArray) Condition
	IsNotILike(value StringArrayField) JoinCondition

	NotLike(value pq.StringArray) Condition
	IsNotLike(value StringArrayField) JoinCondition

	NotSimilar(value pq.StringArray) Condition
	IsNotSimilar(value StringArrayField) JoinCondition

	Simiar(value pq.StringArray) Condition
	IsSimilar(value StringArrayField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []pq.StringArray) Condition
	NotIn(value []pq.StringArray) Condition
}

func (c *stringarrayField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *stringarrayField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &stringarrayField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &stringarrayField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *stringarrayField) FilterWhere(filters ...Condition) Field {
	return &stringarrayField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *stringarrayField) As(alias string) Field {
	return &stringarrayField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *stringarrayField) Alias() string {
	return c.alias
}

func (c *stringarrayField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *stringarrayField) Name() string {
	return c.name
}

func (c *stringarrayField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *stringarrayField) Parent() Selectable {
	return c.selection
}

func (c *stringarrayField) Filters() []Condition {
	return c.filters
}

// --

func (c *stringarrayField) Eq(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *stringarrayField) IsEq(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *stringarrayField) Gt(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *stringarrayField) IsGt(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *stringarrayField) Gte(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *stringarrayField) IsGte(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *stringarrayField) ILike(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *stringarrayField) IsILike(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *stringarrayField) Like(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *stringarrayField) IsLike(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *stringarrayField) Lt(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *stringarrayField) IsLt(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *stringarrayField) Lte(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *stringarrayField) IsLte(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *stringarrayField) NotEq(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *stringarrayField) IsNotEq(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *stringarrayField) NotILike(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *stringarrayField) IsNotILike(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *stringarrayField) NotLike(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *stringarrayField) IsNotLike(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *stringarrayField) NotSimilar(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *stringarrayField) IsNotSimilar(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *stringarrayField) Simiar(pred pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *stringarrayField) IsSimilar(pred StringArrayField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *stringarrayField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *stringarrayField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *stringarrayField) In(pred []pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *stringarrayField) NotIn(pred []pq.StringArray) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func StringArray(s Selectable, name string) StringArrayField {
	return &stringarrayField{name: name, selection: s}
}

//////

func (c *stringarrayField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *stringarrayField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *stringarrayField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *stringarrayField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *stringarrayField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *stringarrayField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *stringarrayField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *stringarrayField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *stringarrayField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *stringarrayField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *stringarrayField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *stringarrayField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *stringarrayField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *stringarrayField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *stringarrayField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *stringarrayField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *stringarrayField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *stringarrayField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *stringarrayField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *stringarrayField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *stringarrayField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *stringarrayField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *stringarrayField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *stringarrayField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type timeField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type TimeField interface {
	TableField

	Eq(value time.Time) Condition
	IsEq(value TimeField) JoinCondition

	Gt(value time.Time) Condition
	IsGt(value TimeField) JoinCondition

	Gte(value time.Time) Condition
	IsGte(value TimeField) JoinCondition

	ILike(value time.Time) Condition
	IsILike(value TimeField) JoinCondition

	Like(value time.Time) Condition
	IsLike(value TimeField) JoinCondition

	Lt(value time.Time) Condition
	IsLt(value TimeField) JoinCondition

	Lte(value time.Time) Condition
	IsLte(value TimeField) JoinCondition

	NotEq(value time.Time) Condition
	IsNotEq(value TimeField) JoinCondition

	NotILike(value time.Time) Condition
	IsNotILike(value TimeField) JoinCondition

	NotLike(value time.Time) Condition
	IsNotLike(value TimeField) JoinCondition

	NotSimilar(value time.Time) Condition
	IsNotSimilar(value TimeField) JoinCondition

	Simiar(value time.Time) Condition
	IsSimilar(value TimeField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []time.Time) Condition
	NotIn(value []time.Time) Condition
}

func (c *timeField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *timeField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &timeField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &timeField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *timeField) FilterWhere(filters ...Condition) Field {
	return &timeField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *timeField) As(alias string) Field {
	return &timeField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *timeField) Alias() string {
	return c.alias
}

func (c *timeField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *timeField) Name() string {
	return c.name
}

func (c *timeField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *timeField) Parent() Selectable {
	return c.selection
}

func (c *timeField) Filters() []Condition {
	return c.filters
}

// --

func (c *timeField) Eq(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *timeField) IsEq(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *timeField) Gt(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *timeField) IsGt(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *timeField) Gte(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *timeField) IsGte(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *timeField) ILike(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *timeField) IsILike(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *timeField) Like(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *timeField) IsLike(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *timeField) Lt(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *timeField) IsLt(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *timeField) Lte(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *timeField) IsLte(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *timeField) NotEq(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *timeField) IsNotEq(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *timeField) NotILike(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *timeField) IsNotILike(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *timeField) NotLike(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *timeField) IsNotLike(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *timeField) NotSimilar(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *timeField) IsNotSimilar(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *timeField) Simiar(pred time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *timeField) IsSimilar(pred TimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *timeField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *timeField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *timeField) In(pred []time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *timeField) NotIn(pred []time.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func Time(s Selectable, name string) TimeField {
	return &timeField{name: name, selection: s}
}

//////

func (c *timeField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *timeField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *timeField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *timeField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *timeField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *timeField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *timeField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *timeField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *timeField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *timeField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *timeField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *timeField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *timeField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *timeField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *timeField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *timeField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *timeField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *timeField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *timeField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *timeField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *timeField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *timeField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *timeField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *timeField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type uuidField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type UUIDField interface {
	TableField

	Eq(value uuid.UUID) Condition
	IsEq(value UUIDField) JoinCondition

	Gt(value uuid.UUID) Condition
	IsGt(value UUIDField) JoinCondition

	Gte(value uuid.UUID) Condition
	IsGte(value UUIDField) JoinCondition

	ILike(value uuid.UUID) Condition
	IsILike(value UUIDField) JoinCondition

	Like(value uuid.UUID) Condition
	IsLike(value UUIDField) JoinCondition

	Lt(value uuid.UUID) Condition
	IsLt(value UUIDField) JoinCondition

	Lte(value uuid.UUID) Condition
	IsLte(value UUIDField) JoinCondition

	NotEq(value uuid.UUID) Condition
	IsNotEq(value UUIDField) JoinCondition

	NotILike(value uuid.UUID) Condition
	IsNotILike(value UUIDField) JoinCondition

	NotLike(value uuid.UUID) Condition
	IsNotLike(value UUIDField) JoinCondition

	NotSimilar(value uuid.UUID) Condition
	IsNotSimilar(value UUIDField) JoinCondition

	Simiar(value uuid.UUID) Condition
	IsSimilar(value UUIDField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []uuid.UUID) Condition
	NotIn(value []uuid.UUID) Condition
}

func (c *uuidField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *uuidField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &uuidField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &uuidField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *uuidField) FilterWhere(filters ...Condition) Field {
	return &uuidField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *uuidField) As(alias string) Field {
	return &uuidField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *uuidField) Alias() string {
	return c.alias
}

func (c *uuidField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *uuidField) Name() string {
	return c.name
}

func (c *uuidField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *uuidField) Parent() Selectable {
	return c.selection
}

func (c *uuidField) Filters() []Condition {
	return c.filters
}

// --

func (c *uuidField) Eq(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *uuidField) IsEq(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *uuidField) Gt(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *uuidField) IsGt(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *uuidField) Gte(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *uuidField) IsGte(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *uuidField) ILike(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *uuidField) IsILike(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *uuidField) Like(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *uuidField) IsLike(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *uuidField) Lt(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *uuidField) IsLt(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *uuidField) Lte(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *uuidField) IsLte(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *uuidField) NotEq(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *uuidField) IsNotEq(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *uuidField) NotILike(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *uuidField) IsNotILike(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *uuidField) NotLike(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *uuidField) IsNotLike(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *uuidField) NotSimilar(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *uuidField) IsNotSimilar(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *uuidField) Simiar(pred uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *uuidField) IsSimilar(pred UUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *uuidField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *uuidField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *uuidField) In(pred []uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *uuidField) NotIn(pred []uuid.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func UUID(s Selectable, name string) UUIDField {
	return &uuidField{name: name, selection: s}
}

//////

func (c *uuidField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *uuidField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *uuidField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *uuidField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *uuidField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *uuidField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *uuidField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *uuidField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *uuidField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *uuidField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *uuidField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *uuidField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *uuidField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *uuidField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *uuidField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *uuidField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *uuidField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *uuidField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *uuidField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *uuidField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *uuidField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *uuidField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *uuidField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *uuidField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nullboolField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullBoolField interface {
	TableField

	Eq(value null.Bool) Condition
	IsEq(value NullBoolField) JoinCondition

	Gt(value null.Bool) Condition
	IsGt(value NullBoolField) JoinCondition

	Gte(value null.Bool) Condition
	IsGte(value NullBoolField) JoinCondition

	ILike(value null.Bool) Condition
	IsILike(value NullBoolField) JoinCondition

	Like(value null.Bool) Condition
	IsLike(value NullBoolField) JoinCondition

	Lt(value null.Bool) Condition
	IsLt(value NullBoolField) JoinCondition

	Lte(value null.Bool) Condition
	IsLte(value NullBoolField) JoinCondition

	NotEq(value null.Bool) Condition
	IsNotEq(value NullBoolField) JoinCondition

	NotILike(value null.Bool) Condition
	IsNotILike(value NullBoolField) JoinCondition

	NotLike(value null.Bool) Condition
	IsNotLike(value NullBoolField) JoinCondition

	NotSimilar(value null.Bool) Condition
	IsNotSimilar(value NullBoolField) JoinCondition

	Simiar(value null.Bool) Condition
	IsSimilar(value NullBoolField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []null.Bool) Condition
	NotIn(value []null.Bool) Condition
}

func (c *nullboolField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nullboolField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nullboolField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nullboolField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nullboolField) FilterWhere(filters ...Condition) Field {
	return &nullboolField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nullboolField) As(alias string) Field {
	return &nullboolField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nullboolField) Alias() string {
	return c.alias
}

func (c *nullboolField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nullboolField) Name() string {
	return c.name
}

func (c *nullboolField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nullboolField) Parent() Selectable {
	return c.selection
}

func (c *nullboolField) Filters() []Condition {
	return c.filters
}

// --

func (c *nullboolField) Eq(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nullboolField) IsEq(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nullboolField) Gt(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nullboolField) IsGt(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nullboolField) Gte(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nullboolField) IsGte(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nullboolField) ILike(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nullboolField) IsILike(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nullboolField) Like(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nullboolField) IsLike(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nullboolField) Lt(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nullboolField) IsLt(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nullboolField) Lte(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nullboolField) IsLte(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nullboolField) NotEq(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nullboolField) IsNotEq(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nullboolField) NotILike(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nullboolField) IsNotILike(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nullboolField) NotLike(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nullboolField) IsNotLike(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nullboolField) NotSimilar(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nullboolField) IsNotSimilar(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nullboolField) Simiar(pred null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nullboolField) IsSimilar(pred NullBoolField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nullboolField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nullboolField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nullboolField) In(pred []null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nullboolField) NotIn(pred []null.Bool) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullBool(s Selectable, name string) NullBoolField {
	return &nullboolField{name: name, selection: s}
}

//////

func (c *nullboolField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nullboolField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nullboolField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nullboolField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nullboolField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nullboolField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nullboolField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nullboolField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nullboolField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nullboolField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nullboolField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nullboolField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nullboolField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nullboolField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nullboolField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nullboolField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nullboolField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nullboolField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nullboolField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nullboolField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nullboolField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nullboolField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nullboolField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nullboolField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nullfloat32Field struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullFloat32Field interface {
	TableField

	Eq(value null.Float) Condition
	IsEq(value NullFloat32Field) JoinCondition

	Gt(value null.Float) Condition
	IsGt(value NullFloat32Field) JoinCondition

	Gte(value null.Float) Condition
	IsGte(value NullFloat32Field) JoinCondition

	ILike(value null.Float) Condition
	IsILike(value NullFloat32Field) JoinCondition

	Like(value null.Float) Condition
	IsLike(value NullFloat32Field) JoinCondition

	Lt(value null.Float) Condition
	IsLt(value NullFloat32Field) JoinCondition

	Lte(value null.Float) Condition
	IsLte(value NullFloat32Field) JoinCondition

	NotEq(value null.Float) Condition
	IsNotEq(value NullFloat32Field) JoinCondition

	NotILike(value null.Float) Condition
	IsNotILike(value NullFloat32Field) JoinCondition

	NotLike(value null.Float) Condition
	IsNotLike(value NullFloat32Field) JoinCondition

	NotSimilar(value null.Float) Condition
	IsNotSimilar(value NullFloat32Field) JoinCondition

	Simiar(value null.Float) Condition
	IsSimilar(value NullFloat32Field) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []null.Float) Condition
	NotIn(value []null.Float) Condition
}

func (c *nullfloat32Field) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nullfloat32Field) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nullfloat32Field{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nullfloat32Field{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nullfloat32Field) FilterWhere(filters ...Condition) Field {
	return &nullfloat32Field{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nullfloat32Field) As(alias string) Field {
	return &nullfloat32Field{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nullfloat32Field) Alias() string {
	return c.alias
}

func (c *nullfloat32Field) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nullfloat32Field) Name() string {
	return c.name
}

func (c *nullfloat32Field) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nullfloat32Field) Parent() Selectable {
	return c.selection
}

func (c *nullfloat32Field) Filters() []Condition {
	return c.filters
}

// --

func (c *nullfloat32Field) Eq(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nullfloat32Field) IsEq(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nullfloat32Field) Gt(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nullfloat32Field) IsGt(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nullfloat32Field) Gte(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nullfloat32Field) IsGte(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nullfloat32Field) ILike(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nullfloat32Field) IsILike(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nullfloat32Field) Like(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nullfloat32Field) IsLike(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nullfloat32Field) Lt(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nullfloat32Field) IsLt(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nullfloat32Field) Lte(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nullfloat32Field) IsLte(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nullfloat32Field) NotEq(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nullfloat32Field) IsNotEq(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nullfloat32Field) NotILike(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nullfloat32Field) IsNotILike(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nullfloat32Field) NotLike(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nullfloat32Field) IsNotLike(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nullfloat32Field) NotSimilar(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nullfloat32Field) IsNotSimilar(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nullfloat32Field) Simiar(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nullfloat32Field) IsSimilar(pred NullFloat32Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nullfloat32Field) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nullfloat32Field) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nullfloat32Field) In(pred []null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nullfloat32Field) NotIn(pred []null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullFloat32(s Selectable, name string) NullFloat32Field {
	return &nullfloat32Field{name: name, selection: s}
}

//////

func (c *nullfloat32Field) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nullfloat32Field) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nullfloat32Field) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nullfloat32Field) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nullfloat32Field) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nullfloat32Field) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nullfloat32Field) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nullfloat32Field) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nullfloat32Field) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nullfloat32Field) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nullfloat32Field) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nullfloat32Field) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nullfloat32Field) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nullfloat32Field) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nullfloat32Field) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nullfloat32Field) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nullfloat32Field) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nullfloat32Field) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nullfloat32Field) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nullfloat32Field) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nullfloat32Field) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nullfloat32Field) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nullfloat32Field) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nullfloat32Field) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nullfloat64Field struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullFloat64Field interface {
	TableField

	Eq(value null.Float) Condition
	IsEq(value NullFloat64Field) JoinCondition

	Gt(value null.Float) Condition
	IsGt(value NullFloat64Field) JoinCondition

	Gte(value null.Float) Condition
	IsGte(value NullFloat64Field) JoinCondition

	ILike(value null.Float) Condition
	IsILike(value NullFloat64Field) JoinCondition

	Like(value null.Float) Condition
	IsLike(value NullFloat64Field) JoinCondition

	Lt(value null.Float) Condition
	IsLt(value NullFloat64Field) JoinCondition

	Lte(value null.Float) Condition
	IsLte(value NullFloat64Field) JoinCondition

	NotEq(value null.Float) Condition
	IsNotEq(value NullFloat64Field) JoinCondition

	NotILike(value null.Float) Condition
	IsNotILike(value NullFloat64Field) JoinCondition

	NotLike(value null.Float) Condition
	IsNotLike(value NullFloat64Field) JoinCondition

	NotSimilar(value null.Float) Condition
	IsNotSimilar(value NullFloat64Field) JoinCondition

	Simiar(value null.Float) Condition
	IsSimilar(value NullFloat64Field) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []null.Float) Condition
	NotIn(value []null.Float) Condition
}

func (c *nullfloat64Field) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nullfloat64Field) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nullfloat64Field{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nullfloat64Field{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nullfloat64Field) FilterWhere(filters ...Condition) Field {
	return &nullfloat64Field{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nullfloat64Field) As(alias string) Field {
	return &nullfloat64Field{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nullfloat64Field) Alias() string {
	return c.alias
}

func (c *nullfloat64Field) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nullfloat64Field) Name() string {
	return c.name
}

func (c *nullfloat64Field) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nullfloat64Field) Parent() Selectable {
	return c.selection
}

func (c *nullfloat64Field) Filters() []Condition {
	return c.filters
}

// --

func (c *nullfloat64Field) Eq(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nullfloat64Field) IsEq(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nullfloat64Field) Gt(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nullfloat64Field) IsGt(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nullfloat64Field) Gte(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nullfloat64Field) IsGte(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nullfloat64Field) ILike(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nullfloat64Field) IsILike(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nullfloat64Field) Like(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nullfloat64Field) IsLike(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nullfloat64Field) Lt(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nullfloat64Field) IsLt(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nullfloat64Field) Lte(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nullfloat64Field) IsLte(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nullfloat64Field) NotEq(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nullfloat64Field) IsNotEq(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nullfloat64Field) NotILike(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nullfloat64Field) IsNotILike(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nullfloat64Field) NotLike(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nullfloat64Field) IsNotLike(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nullfloat64Field) NotSimilar(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nullfloat64Field) IsNotSimilar(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nullfloat64Field) Simiar(pred null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nullfloat64Field) IsSimilar(pred NullFloat64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nullfloat64Field) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nullfloat64Field) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nullfloat64Field) In(pred []null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nullfloat64Field) NotIn(pred []null.Float) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullFloat64(s Selectable, name string) NullFloat64Field {
	return &nullfloat64Field{name: name, selection: s}
}

//////

func (c *nullfloat64Field) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nullfloat64Field) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nullfloat64Field) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nullfloat64Field) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nullfloat64Field) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nullfloat64Field) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nullfloat64Field) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nullfloat64Field) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nullfloat64Field) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nullfloat64Field) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nullfloat64Field) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nullfloat64Field) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nullfloat64Field) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nullfloat64Field) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nullfloat64Field) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nullfloat64Field) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nullfloat64Field) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nullfloat64Field) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nullfloat64Field) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nullfloat64Field) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nullfloat64Field) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nullfloat64Field) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nullfloat64Field) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nullfloat64Field) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nullintField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullIntField interface {
	TableField

	Eq(value null.Int) Condition
	IsEq(value NullIntField) JoinCondition

	Gt(value null.Int) Condition
	IsGt(value NullIntField) JoinCondition

	Gte(value null.Int) Condition
	IsGte(value NullIntField) JoinCondition

	ILike(value null.Int) Condition
	IsILike(value NullIntField) JoinCondition

	Like(value null.Int) Condition
	IsLike(value NullIntField) JoinCondition

	Lt(value null.Int) Condition
	IsLt(value NullIntField) JoinCondition

	Lte(value null.Int) Condition
	IsLte(value NullIntField) JoinCondition

	NotEq(value null.Int) Condition
	IsNotEq(value NullIntField) JoinCondition

	NotILike(value null.Int) Condition
	IsNotILike(value NullIntField) JoinCondition

	NotLike(value null.Int) Condition
	IsNotLike(value NullIntField) JoinCondition

	NotSimilar(value null.Int) Condition
	IsNotSimilar(value NullIntField) JoinCondition

	Simiar(value null.Int) Condition
	IsSimilar(value NullIntField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []null.Int) Condition
	NotIn(value []null.Int) Condition
}

func (c *nullintField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nullintField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nullintField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nullintField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nullintField) FilterWhere(filters ...Condition) Field {
	return &nullintField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nullintField) As(alias string) Field {
	return &nullintField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nullintField) Alias() string {
	return c.alias
}

func (c *nullintField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nullintField) Name() string {
	return c.name
}

func (c *nullintField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nullintField) Parent() Selectable {
	return c.selection
}

func (c *nullintField) Filters() []Condition {
	return c.filters
}

// --

func (c *nullintField) Eq(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nullintField) IsEq(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nullintField) Gt(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nullintField) IsGt(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nullintField) Gte(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nullintField) IsGte(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nullintField) ILike(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nullintField) IsILike(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nullintField) Like(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nullintField) IsLike(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nullintField) Lt(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nullintField) IsLt(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nullintField) Lte(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nullintField) IsLte(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nullintField) NotEq(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nullintField) IsNotEq(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nullintField) NotILike(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nullintField) IsNotILike(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nullintField) NotLike(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nullintField) IsNotLike(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nullintField) NotSimilar(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nullintField) IsNotSimilar(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nullintField) Simiar(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nullintField) IsSimilar(pred NullIntField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nullintField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nullintField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nullintField) In(pred []null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nullintField) NotIn(pred []null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullInt(s Selectable, name string) NullIntField {
	return &nullintField{name: name, selection: s}
}

//////

func (c *nullintField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nullintField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nullintField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nullintField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nullintField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nullintField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nullintField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nullintField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nullintField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nullintField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nullintField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nullintField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nullintField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nullintField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nullintField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nullintField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nullintField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nullintField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nullintField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nullintField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nullintField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nullintField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nullintField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nullintField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nullint64Field struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullInt64Field interface {
	TableField

	Eq(value null.Int) Condition
	IsEq(value NullInt64Field) JoinCondition

	Gt(value null.Int) Condition
	IsGt(value NullInt64Field) JoinCondition

	Gte(value null.Int) Condition
	IsGte(value NullInt64Field) JoinCondition

	ILike(value null.Int) Condition
	IsILike(value NullInt64Field) JoinCondition

	Like(value null.Int) Condition
	IsLike(value NullInt64Field) JoinCondition

	Lt(value null.Int) Condition
	IsLt(value NullInt64Field) JoinCondition

	Lte(value null.Int) Condition
	IsLte(value NullInt64Field) JoinCondition

	NotEq(value null.Int) Condition
	IsNotEq(value NullInt64Field) JoinCondition

	NotILike(value null.Int) Condition
	IsNotILike(value NullInt64Field) JoinCondition

	NotLike(value null.Int) Condition
	IsNotLike(value NullInt64Field) JoinCondition

	NotSimilar(value null.Int) Condition
	IsNotSimilar(value NullInt64Field) JoinCondition

	Simiar(value null.Int) Condition
	IsSimilar(value NullInt64Field) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []null.Int) Condition
	NotIn(value []null.Int) Condition
}

func (c *nullint64Field) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nullint64Field) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nullint64Field{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nullint64Field{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nullint64Field) FilterWhere(filters ...Condition) Field {
	return &nullint64Field{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nullint64Field) As(alias string) Field {
	return &nullint64Field{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nullint64Field) Alias() string {
	return c.alias
}

func (c *nullint64Field) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nullint64Field) Name() string {
	return c.name
}

func (c *nullint64Field) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nullint64Field) Parent() Selectable {
	return c.selection
}

func (c *nullint64Field) Filters() []Condition {
	return c.filters
}

// --

func (c *nullint64Field) Eq(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nullint64Field) IsEq(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nullint64Field) Gt(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nullint64Field) IsGt(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nullint64Field) Gte(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nullint64Field) IsGte(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nullint64Field) ILike(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nullint64Field) IsILike(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nullint64Field) Like(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nullint64Field) IsLike(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nullint64Field) Lt(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nullint64Field) IsLt(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nullint64Field) Lte(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nullint64Field) IsLte(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nullint64Field) NotEq(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nullint64Field) IsNotEq(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nullint64Field) NotILike(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nullint64Field) IsNotILike(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nullint64Field) NotLike(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nullint64Field) IsNotLike(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nullint64Field) NotSimilar(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nullint64Field) IsNotSimilar(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nullint64Field) Simiar(pred null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nullint64Field) IsSimilar(pred NullInt64Field) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nullint64Field) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nullint64Field) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nullint64Field) In(pred []null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nullint64Field) NotIn(pred []null.Int) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullInt64(s Selectable, name string) NullInt64Field {
	return &nullint64Field{name: name, selection: s}
}

//////

func (c *nullint64Field) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nullint64Field) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nullint64Field) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nullint64Field) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nullint64Field) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nullint64Field) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nullint64Field) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nullint64Field) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nullint64Field) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nullint64Field) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nullint64Field) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nullint64Field) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nullint64Field) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nullint64Field) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nullint64Field) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nullint64Field) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nullint64Field) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nullint64Field) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nullint64Field) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nullint64Field) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nullint64Field) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nullint64Field) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nullint64Field) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nullint64Field) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nulljsonbField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullJsonbField interface {
	TableField

	Eq(value nullable.Jsonb) Condition
	IsEq(value NullJsonbField) JoinCondition

	Gt(value nullable.Jsonb) Condition
	IsGt(value NullJsonbField) JoinCondition

	Gte(value nullable.Jsonb) Condition
	IsGte(value NullJsonbField) JoinCondition

	ILike(value nullable.Jsonb) Condition
	IsILike(value NullJsonbField) JoinCondition

	Like(value nullable.Jsonb) Condition
	IsLike(value NullJsonbField) JoinCondition

	Lt(value nullable.Jsonb) Condition
	IsLt(value NullJsonbField) JoinCondition

	Lte(value nullable.Jsonb) Condition
	IsLte(value NullJsonbField) JoinCondition

	NotEq(value nullable.Jsonb) Condition
	IsNotEq(value NullJsonbField) JoinCondition

	NotILike(value nullable.Jsonb) Condition
	IsNotILike(value NullJsonbField) JoinCondition

	NotLike(value nullable.Jsonb) Condition
	IsNotLike(value NullJsonbField) JoinCondition

	NotSimilar(value nullable.Jsonb) Condition
	IsNotSimilar(value NullJsonbField) JoinCondition

	Simiar(value nullable.Jsonb) Condition
	IsSimilar(value NullJsonbField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []nullable.Jsonb) Condition
	NotIn(value []nullable.Jsonb) Condition
}

func (c *nulljsonbField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nulljsonbField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nulljsonbField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nulljsonbField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nulljsonbField) FilterWhere(filters ...Condition) Field {
	return &nulljsonbField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nulljsonbField) As(alias string) Field {
	return &nulljsonbField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nulljsonbField) Alias() string {
	return c.alias
}

func (c *nulljsonbField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nulljsonbField) Name() string {
	return c.name
}

func (c *nulljsonbField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nulljsonbField) Parent() Selectable {
	return c.selection
}

func (c *nulljsonbField) Filters() []Condition {
	return c.filters
}

// --

func (c *nulljsonbField) Eq(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nulljsonbField) IsEq(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nulljsonbField) Gt(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nulljsonbField) IsGt(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nulljsonbField) Gte(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nulljsonbField) IsGte(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nulljsonbField) ILike(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nulljsonbField) IsILike(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nulljsonbField) Like(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nulljsonbField) IsLike(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nulljsonbField) Lt(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nulljsonbField) IsLt(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nulljsonbField) Lte(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nulljsonbField) IsLte(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nulljsonbField) NotEq(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nulljsonbField) IsNotEq(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nulljsonbField) NotILike(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nulljsonbField) IsNotILike(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nulljsonbField) NotLike(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nulljsonbField) IsNotLike(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nulljsonbField) NotSimilar(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nulljsonbField) IsNotSimilar(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nulljsonbField) Simiar(pred nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nulljsonbField) IsSimilar(pred NullJsonbField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nulljsonbField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nulljsonbField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nulljsonbField) In(pred []nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nulljsonbField) NotIn(pred []nullable.Jsonb) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullJsonb(s Selectable, name string) NullJsonbField {
	return &nulljsonbField{name: name, selection: s}
}

//////

func (c *nulljsonbField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nulljsonbField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nulljsonbField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nulljsonbField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nulljsonbField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nulljsonbField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nulljsonbField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nulljsonbField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nulljsonbField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nulljsonbField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nulljsonbField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nulljsonbField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nulljsonbField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nulljsonbField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nulljsonbField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nulljsonbField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nulljsonbField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nulljsonbField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nulljsonbField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nulljsonbField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nulljsonbField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nulljsonbField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nulljsonbField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nulljsonbField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nullstringField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullStringField interface {
	TableField

	Eq(value null.String) Condition
	IsEq(value NullStringField) JoinCondition

	Gt(value null.String) Condition
	IsGt(value NullStringField) JoinCondition

	Gte(value null.String) Condition
	IsGte(value NullStringField) JoinCondition

	ILike(value null.String) Condition
	IsILike(value NullStringField) JoinCondition

	Like(value null.String) Condition
	IsLike(value NullStringField) JoinCondition

	Lt(value null.String) Condition
	IsLt(value NullStringField) JoinCondition

	Lte(value null.String) Condition
	IsLte(value NullStringField) JoinCondition

	NotEq(value null.String) Condition
	IsNotEq(value NullStringField) JoinCondition

	NotILike(value null.String) Condition
	IsNotILike(value NullStringField) JoinCondition

	NotLike(value null.String) Condition
	IsNotLike(value NullStringField) JoinCondition

	NotSimilar(value null.String) Condition
	IsNotSimilar(value NullStringField) JoinCondition

	Simiar(value null.String) Condition
	IsSimilar(value NullStringField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []null.String) Condition
	NotIn(value []null.String) Condition
}

func (c *nullstringField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nullstringField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nullstringField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nullstringField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nullstringField) FilterWhere(filters ...Condition) Field {
	return &nullstringField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nullstringField) As(alias string) Field {
	return &nullstringField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nullstringField) Alias() string {
	return c.alias
}

func (c *nullstringField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nullstringField) Name() string {
	return c.name
}

func (c *nullstringField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nullstringField) Parent() Selectable {
	return c.selection
}

func (c *nullstringField) Filters() []Condition {
	return c.filters
}

// --

func (c *nullstringField) Eq(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nullstringField) IsEq(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nullstringField) Gt(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nullstringField) IsGt(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nullstringField) Gte(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nullstringField) IsGte(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nullstringField) ILike(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nullstringField) IsILike(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nullstringField) Like(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nullstringField) IsLike(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nullstringField) Lt(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nullstringField) IsLt(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nullstringField) Lte(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nullstringField) IsLte(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nullstringField) NotEq(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nullstringField) IsNotEq(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nullstringField) NotILike(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nullstringField) IsNotILike(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nullstringField) NotLike(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nullstringField) IsNotLike(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nullstringField) NotSimilar(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nullstringField) IsNotSimilar(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nullstringField) Simiar(pred null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nullstringField) IsSimilar(pred NullStringField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nullstringField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nullstringField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nullstringField) In(pred []null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nullstringField) NotIn(pred []null.String) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullString(s Selectable, name string) NullStringField {
	return &nullstringField{name: name, selection: s}
}

//////

func (c *nullstringField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nullstringField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nullstringField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nullstringField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nullstringField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nullstringField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nullstringField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nullstringField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nullstringField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nullstringField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nullstringField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nullstringField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nullstringField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nullstringField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nullstringField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nullstringField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nullstringField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nullstringField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nullstringField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nullstringField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nullstringField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nullstringField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nullstringField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nullstringField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nulltimeField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullTimeField interface {
	TableField

	Eq(value null.Time) Condition
	IsEq(value NullTimeField) JoinCondition

	Gt(value null.Time) Condition
	IsGt(value NullTimeField) JoinCondition

	Gte(value null.Time) Condition
	IsGte(value NullTimeField) JoinCondition

	ILike(value null.Time) Condition
	IsILike(value NullTimeField) JoinCondition

	Like(value null.Time) Condition
	IsLike(value NullTimeField) JoinCondition

	Lt(value null.Time) Condition
	IsLt(value NullTimeField) JoinCondition

	Lte(value null.Time) Condition
	IsLte(value NullTimeField) JoinCondition

	NotEq(value null.Time) Condition
	IsNotEq(value NullTimeField) JoinCondition

	NotILike(value null.Time) Condition
	IsNotILike(value NullTimeField) JoinCondition

	NotLike(value null.Time) Condition
	IsNotLike(value NullTimeField) JoinCondition

	NotSimilar(value null.Time) Condition
	IsNotSimilar(value NullTimeField) JoinCondition

	Simiar(value null.Time) Condition
	IsSimilar(value NullTimeField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []null.Time) Condition
	NotIn(value []null.Time) Condition
}

func (c *nulltimeField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nulltimeField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nulltimeField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nulltimeField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nulltimeField) FilterWhere(filters ...Condition) Field {
	return &nulltimeField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nulltimeField) As(alias string) Field {
	return &nulltimeField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nulltimeField) Alias() string {
	return c.alias
}

func (c *nulltimeField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nulltimeField) Name() string {
	return c.name
}

func (c *nulltimeField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nulltimeField) Parent() Selectable {
	return c.selection
}

func (c *nulltimeField) Filters() []Condition {
	return c.filters
}

// --

func (c *nulltimeField) Eq(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nulltimeField) IsEq(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nulltimeField) Gt(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nulltimeField) IsGt(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nulltimeField) Gte(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nulltimeField) IsGte(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nulltimeField) ILike(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nulltimeField) IsILike(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nulltimeField) Like(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nulltimeField) IsLike(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nulltimeField) Lt(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nulltimeField) IsLt(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nulltimeField) Lte(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nulltimeField) IsLte(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nulltimeField) NotEq(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nulltimeField) IsNotEq(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nulltimeField) NotILike(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nulltimeField) IsNotILike(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nulltimeField) NotLike(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nulltimeField) IsNotLike(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nulltimeField) NotSimilar(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nulltimeField) IsNotSimilar(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nulltimeField) Simiar(pred null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nulltimeField) IsSimilar(pred NullTimeField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nulltimeField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nulltimeField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nulltimeField) In(pred []null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nulltimeField) NotIn(pred []null.Time) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullTime(s Selectable, name string) NullTimeField {
	return &nulltimeField{name: name, selection: s}
}

//////

func (c *nulltimeField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nulltimeField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nulltimeField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nulltimeField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nulltimeField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nulltimeField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nulltimeField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nulltimeField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nulltimeField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nulltimeField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nulltimeField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nulltimeField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nulltimeField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nulltimeField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nulltimeField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nulltimeField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nulltimeField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nulltimeField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nulltimeField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nulltimeField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nulltimeField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nulltimeField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nulltimeField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nulltimeField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}

type nulluuidField struct {
	name      string
	selection Selectable
	alias     string
	fun       FieldFunction
	filters   []Condition
}

type NullUUIDField interface {
	TableField

	Eq(value nullable.UUID) Condition
	IsEq(value NullUUIDField) JoinCondition

	Gt(value nullable.UUID) Condition
	IsGt(value NullUUIDField) JoinCondition

	Gte(value nullable.UUID) Condition
	IsGte(value NullUUIDField) JoinCondition

	ILike(value nullable.UUID) Condition
	IsILike(value NullUUIDField) JoinCondition

	Like(value nullable.UUID) Condition
	IsLike(value NullUUIDField) JoinCondition

	Lt(value nullable.UUID) Condition
	IsLt(value NullUUIDField) JoinCondition

	Lte(value nullable.UUID) Condition
	IsLte(value NullUUIDField) JoinCondition

	NotEq(value nullable.UUID) Condition
	IsNotEq(value NullUUIDField) JoinCondition

	NotILike(value nullable.UUID) Condition
	IsNotILike(value NullUUIDField) JoinCondition

	NotLike(value nullable.UUID) Condition
	IsNotLike(value NullUUIDField) JoinCondition

	NotSimilar(value nullable.UUID) Condition
	IsNotSimilar(value NullUUIDField) JoinCondition

	Simiar(value nullable.UUID) Condition
	IsSimilar(value NullUUIDField) JoinCondition

	IsNull() Condition
	IsNotNull() Condition
	In(value []nullable.UUID) Condition
	NotIn(value []nullable.UUID) Condition
}

func (c *nulluuidField) Function() FieldFunction {
	return FieldFunction{
		Name:  c.fun.Name,
		Expr:  c.fun.Expr,
		Args:  c.fun.Args,
		Child: c.fun.Child,
	}
}

func (c *nulluuidField) fct(fun, expr string, args ...interface{}) Field {
	if &c.fun == nil {
		return &nulluuidField{
			name:      c.name,
			selection: c.selection,
			fun:       FieldFunction{Name: fun, Expr: expr, Args: args},
		}
	} else {
		return &nulluuidField{
			name:      c.name,
			selection: c.selection,
			fun: FieldFunction{
				Name: fun,
				Expr: expr,
				Args: args,
				Child: &FieldFunction{
					Name:  c.fun.Name,
					Expr:  c.fun.Expr,
					Args:  c.fun.Args,
					Child: c.fun.Child,
				},
			},
			filters: c.filters,
		}
	}
}

func (c *nulluuidField) FilterWhere(filters ...Condition) Field {
	return &nulluuidField{
		name:      c.name,
		selection: c.selection,
		alias:     c.alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: filters,
	}
}

func (c *nulluuidField) As(alias string) Field {
	return &nulluuidField{
		name:      c.name,
		selection: c.selection,
		alias:     alias,
		fun: FieldFunction{
			Name:  c.fun.Name,
			Expr:  c.fun.Expr,
			Args:  c.fun.Args,
			Child: c.fun.Child,
		},
		filters: c.filters,
	}
}

func (c *nulluuidField) Alias() string {
	return c.alias
}

func (c *nulluuidField) MaybeAlias() string {
	if c.alias == "" {
		return c.name
	} else {
		return c.alias
	}
}

func (c *nulluuidField) Name() string {
	return c.name
}

func (c *nulluuidField) String() string {
	return renderFunction(c.name, c.Function())
}

func (c *nulluuidField) Parent() Selectable {
	return c.selection
}

func (c *nulluuidField) Filters() []Condition {
	return c.filters
}

// --

func (c *nulluuidField) Eq(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: EqPredicate}
}

func (c *nulluuidField) IsEq(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: EqPredicate}
}

func (c *nulluuidField) Gt(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtPredicate}
}

func (c *nulluuidField) IsGt(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtPredicate}
}

func (c *nulluuidField) Gte(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: GtePredicate}
}

func (c *nulluuidField) IsGte(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: GtePredicate}
}

func (c *nulluuidField) ILike(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: ILikePredicate}
}

func (c *nulluuidField) IsILike(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: ILikePredicate}
}

func (c *nulluuidField) Like(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LikePredicate}
}

func (c *nulluuidField) IsLike(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LikePredicate}
}

func (c *nulluuidField) Lt(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtPredicate}
}

func (c *nulluuidField) IsLt(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtPredicate}
}

func (c *nulluuidField) Lte(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: LtePredicate}
}

func (c *nulluuidField) IsLte(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: LtePredicate}
}

func (c *nulluuidField) NotEq(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotEqPredicate}
}

func (c *nulluuidField) IsNotEq(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotEqPredicate}
}

func (c *nulluuidField) NotILike(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotILikePredicate}
}

func (c *nulluuidField) IsNotILike(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotILikePredicate}
}

func (c *nulluuidField) NotLike(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotLikePredicate}
}

func (c *nulluuidField) IsNotLike(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotLikePredicate}
}

func (c *nulluuidField) NotSimilar(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotSimilarPredicate}
}

func (c *nulluuidField) IsNotSimilar(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: NotSimilarPredicate}
}

func (c *nulluuidField) Simiar(pred nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: SimilarPredicate}
}

func (c *nulluuidField) IsSimilar(pred NullUUIDField) JoinCondition {
	return JoinCondition{Lhs: c, Rhs: pred, Predicate: SimilarPredicate}
}

func (c *nulluuidField) IsNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNullPredicate}
}

func (c *nulluuidField) IsNotNull() Condition {
	return Condition{Binding: FieldBinding{Field: c}, Predicate: IsNotNullPredicate}
}

func (c *nulluuidField) In(pred []nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: InPredicate}
}

func (c *nulluuidField) NotIn(pred []nullable.UUID) Condition {
	return Condition{Binding: FieldBinding{Value: pred, Field: c}, Predicate: NotInPredicate}
}

// --

func NullUUID(s Selectable, name string) NullUUIDField {
	return &nulluuidField{name: name, selection: s}
}

//////

func (c *nulluuidField) ArrayAgg() Field {
	return c.fct("ArrayAgg", "ARRAY_AGG(%s)")
}

func (c *nulluuidField) Asc() Field {
	return c.fct("Asc", "%s ASC")
}

func (c *nulluuidField) Avg() Field {
	return c.fct("Avg", "AVG(%s)")
}

func (c *nulluuidField) Cast(_0 interface{}) Field {
	return c.fct("Cast", "CAST(%s AS %s)", _0)
}

func (c *nulluuidField) Ceil() Field {
	return c.fct("Ceil", "CEIL(%s)")
}

func (c *nulluuidField) Coalesce(_0 interface{}) Field {
	return c.fct("Coalesce", "COALESCE(%s, %v)", _0)
}

func (c *nulluuidField) Count() Field {
	return c.fct("Count", "COUNT(%s)")
}

func (c *nulluuidField) Date() Field {
	return c.fct("Date", "DATE(%s)")
}

func (c *nulluuidField) DateTrunc(_0 interface{}) Field {
	return c.fct("DateTrunc", "DATE_TRUNC('%s', %v)", _0)
}

func (c *nulluuidField) Desc() Field {
	return c.fct("Desc", "%s DESC")
}

func (c *nulluuidField) Distinct() Field {
	return c.fct("Distinct", "DISTINCT(%s)")
}

func (c *nulluuidField) Div(_0 interface{}) Field {
	return c.fct("Div", "%s / %v", _0)
}

func (c *nulluuidField) Mult(_0 interface{}) Field {
	return c.fct("Mult", "%s * %v", _0)
}

func (c *nulluuidField) Hex() Field {
	return c.fct("Hex", "HEX(%s)")
}

func (c *nulluuidField) Lower() Field {
	return c.fct("Lower", "LOWER(%s)")
}

func (c *nulluuidField) Max() Field {
	return c.fct("Max", "MAX(%s)")
}

func (c *nulluuidField) Md5() Field {
	return c.fct("Md5", "MD5(%s)")
}

func (c *nulluuidField) Min() Field {
	return c.fct("Min", "MIN(%s)")
}

func (c *nulluuidField) First(_0 interface{}) Field {
	return c.fct("First", "first(%s, %s)", _0)
}

func (c *nulluuidField) Last(_0 interface{}) Field {
	return c.fct("Last", "last(%s, %s)", _0)
}

func (c *nulluuidField) Substr2(_0 interface{}) Field {
	return c.fct("Substr2", "SUBSTR(%s, %v)", _0)
}

func (c *nulluuidField) Substr3(_0, _1 interface{}) Field {
	return c.fct("Substr3", "SUBSTR(%s, %v, %v)", _0, _1)
}

func (c *nulluuidField) Sum() Field {
	return c.fct("Sum", "SUM(%s)")
}

func (c *nulluuidField) Upper() Field {
	return c.fct("Upper", "UPPER(%s)")
}
