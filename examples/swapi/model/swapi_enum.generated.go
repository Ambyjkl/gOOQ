// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

package model

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"io"
	"strconv"
)

type Color string

const (
	ColorBlack  = Color("black")
	ColorBlue   = Color("blue")
	ColorBrown  = Color("brown")
	ColorGreen  = Color("green")
	ColorOrange = Color("orange")
	ColorPurple = Color("purple")
	ColorRed    = Color("red")
	ColorYellow = Color("yellow")
	ColorNull   = Color("")
)

// String returns the string value of the Color.
func (enumType Color) String() string {
	return string(enumType)
}

// MarshalText marshals Color into text.
func (enumType Color) MarshalText() ([]byte, error) {
	return []byte(enumType.String()), nil
}

// UnmarshalText unmarshals Color from text.
func (enumType *Color) UnmarshalText(text []byte) error {
	switch string(text) {
	case "black":
		*enumType = ColorBlack
	case "blue":
		*enumType = ColorBlue
	case "brown":
		*enumType = ColorBrown
	case "green":
		*enumType = ColorGreen
	case "orange":
		*enumType = ColorOrange
	case "purple":
		*enumType = ColorPurple
	case "red":
		*enumType = ColorRed
	case "yellow":
		*enumType = ColorYellow
	default:
		*enumType = ColorNull
	}
	return nil
}

// MarshalGQL satisfies gqlgen interface for Color.
func (enumType Color) MarshalGQL(w io.Writer) {
	if enumType == ColorNull {
		io.WriteString(w, "null")
	} else {
		io.WriteString(w, strconv.Quote(enumType.String()))
	}
}

// UnmarshalText satisfies gqlgen interface for Color.
func (enumType *Color) UnmarshalGQL(v interface{}) error {
	switch str := v.(type) {
	case string:
		return enumType.UnmarshalText([]byte(str))
	case nil:
		return nil
	default:
		return fmt.Errorf("invalid enum value %v", v)
	}
}

// Value satisfies the sql/driver.Valuer interface for Color.
func (enumType Color) Value() (driver.Value, error) {
	if enumType == ColorNull {
		return nil, nil
	}
	return enumType.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Color.
func (enumType *Color) Scan(src interface{}) error {
	switch buf := src.(type) {
	case []byte:
		return enumType.UnmarshalText(buf)
	case string:
		return enumType.UnmarshalText([]byte(buf))
	case nil:
		return nil
	default:
		return errors.New("invalid Color")
	}
}

type Gender string

const (
	GenderMale   = Gender("male")
	GenderFemale = Gender("female")
	GenderNull   = Gender("")
)

// String returns the string value of the Gender.
func (enumType Gender) String() string {
	return string(enumType)
}

// MarshalText marshals Gender into text.
func (enumType Gender) MarshalText() ([]byte, error) {
	return []byte(enumType.String()), nil
}

// UnmarshalText unmarshals Gender from text.
func (enumType *Gender) UnmarshalText(text []byte) error {
	switch string(text) {
	case "male":
		*enumType = GenderMale
	case "female":
		*enumType = GenderFemale
	default:
		*enumType = GenderNull
	}
	return nil
}

// MarshalGQL satisfies gqlgen interface for Gender.
func (enumType Gender) MarshalGQL(w io.Writer) {
	if enumType == GenderNull {
		io.WriteString(w, "null")
	} else {
		io.WriteString(w, strconv.Quote(enumType.String()))
	}
}

// UnmarshalText satisfies gqlgen interface for Gender.
func (enumType *Gender) UnmarshalGQL(v interface{}) error {
	switch str := v.(type) {
	case string:
		return enumType.UnmarshalText([]byte(str))
	case nil:
		return nil
	default:
		return fmt.Errorf("invalid enum value %v", v)
	}
}

// Value satisfies the sql/driver.Valuer interface for Gender.
func (enumType Gender) Value() (driver.Value, error) {
	if enumType == GenderNull {
		return nil, nil
	}
	return enumType.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Gender.
func (enumType *Gender) Scan(src interface{}) error {
	switch buf := src.(type) {
	case []byte:
		return enumType.UnmarshalText(buf)
	case string:
		return enumType.UnmarshalText([]byte(buf))
	case nil:
		return nil
	default:
		return errors.New("invalid Gender")
	}
}
