// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

package table

import (
	"github.com/lumina-tech/gooq/examples/swapi/model"
	"github.com/lumina-tech/gooq/pkg/gooq"
	"gopkg.in/guregu/null.v3"
)

type colorReferenceTableConstraints struct {
	ColorReferenceTablePkey gooq.DatabaseConstraint
}

type colorReferenceTable struct {
	gooq.TableImpl
	Asterisk gooq.StringField
	Value    gooq.StringField

	Constraints *colorReferenceTableConstraints
	alias       null.String
}

func newColorReferenceTableConstraints() *colorReferenceTableConstraints {
	constraints := &colorReferenceTableConstraints{}
	constraints.ColorReferenceTablePkey = gooq.DatabaseConstraint{
		Name:      "color_reference_table_pkey",
		Predicate: null.NewString("", false),
	}
	return constraints
}

func newColorReferenceTable() *colorReferenceTable {
	instance := &colorReferenceTable{}
	instance.Initialize("public", "color_reference_table")
	instance.Asterisk = gooq.NewStringField(instance, "*")
	instance.Value = gooq.NewStringField(instance, "value")
	instance.Constraints = newColorReferenceTableConstraints()
	return instance
}

func (t *colorReferenceTable) As(alias string) gooq.Selectable {
	instance := newColorReferenceTable()
	instance.alias = null.StringFrom(alias)
	return instance
}

func (t *colorReferenceTable) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.ColorReferenceTable, error) {
	result := model.ColorReferenceTable{}
	if err := gooq.ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *colorReferenceTable) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.ColorReferenceTable, error) {
	results := []model.ColorReferenceTable{}
	if err := gooq.ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

var ColorReferenceTable = newColorReferenceTable()

type personConstraints struct {
	PersonPkey gooq.DatabaseConstraint
}

type person struct {
	gooq.TableImpl
	Asterisk  gooq.StringField
	ID        gooq.UUIDField
	Name      gooq.StringField
	Height    gooq.DecimalField
	Mass      gooq.DecimalField
	HairColor gooq.StringField
	SkinColor gooq.StringField
	EyeColor  gooq.StringField
	BirthYear gooq.IntField
	Gender    gooq.StringField
	HomeWorld gooq.StringField
	SpeciesID gooq.UUIDField

	Constraints *personConstraints
	alias       null.String
}

func newPersonConstraints() *personConstraints {
	constraints := &personConstraints{}
	constraints.PersonPkey = gooq.DatabaseConstraint{
		Name:      "person_pkey",
		Predicate: null.NewString("", false),
	}
	return constraints
}

func newPerson() *person {
	instance := &person{}
	instance.Initialize("public", "person")
	instance.Asterisk = gooq.NewStringField(instance, "*")
	instance.ID = gooq.NewUUIDField(instance, "id")
	instance.Name = gooq.NewStringField(instance, "name")
	instance.Height = gooq.NewDecimalField(instance, "height")
	instance.Mass = gooq.NewDecimalField(instance, "mass")
	instance.HairColor = gooq.NewStringField(instance, "hair_color")
	instance.SkinColor = gooq.NewStringField(instance, "skin_color")
	instance.EyeColor = gooq.NewStringField(instance, "eye_color")
	instance.BirthYear = gooq.NewIntField(instance, "birth_year")
	instance.Gender = gooq.NewStringField(instance, "gender")
	instance.HomeWorld = gooq.NewStringField(instance, "home_world")
	instance.SpeciesID = gooq.NewUUIDField(instance, "species_id")
	instance.Constraints = newPersonConstraints()
	return instance
}

func (t *person) As(alias string) gooq.Selectable {
	instance := newPerson()
	instance.alias = null.StringFrom(alias)
	return instance
}

func (t *person) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.Person, error) {
	result := model.Person{}
	if err := gooq.ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *person) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.Person, error) {
	results := []model.Person{}
	if err := gooq.ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

var Person = newPerson()

type speciesConstraints struct {
	SpeciesPkey gooq.DatabaseConstraint
}

type species struct {
	gooq.TableImpl
	Asterisk        gooq.StringField
	ID              gooq.UUIDField
	Name            gooq.StringField
	Classification  gooq.StringField
	AverageHeight   gooq.DecimalField
	AverageLifespan gooq.DecimalField
	HairColor       gooq.StringField
	SkinColor       gooq.StringField
	EyeColor        gooq.StringField
	HomeWorld       gooq.StringField
	Language        gooq.StringField

	Constraints *speciesConstraints
	alias       null.String
}

func newSpeciesConstraints() *speciesConstraints {
	constraints := &speciesConstraints{}
	constraints.SpeciesPkey = gooq.DatabaseConstraint{
		Name:      "species_pkey",
		Predicate: null.NewString("", false),
	}
	return constraints
}

func newSpecies() *species {
	instance := &species{}
	instance.Initialize("public", "species")
	instance.Asterisk = gooq.NewStringField(instance, "*")
	instance.ID = gooq.NewUUIDField(instance, "id")
	instance.Name = gooq.NewStringField(instance, "name")
	instance.Classification = gooq.NewStringField(instance, "classification")
	instance.AverageHeight = gooq.NewDecimalField(instance, "average_height")
	instance.AverageLifespan = gooq.NewDecimalField(instance, "average_lifespan")
	instance.HairColor = gooq.NewStringField(instance, "hair_color")
	instance.SkinColor = gooq.NewStringField(instance, "skin_color")
	instance.EyeColor = gooq.NewStringField(instance, "eye_color")
	instance.HomeWorld = gooq.NewStringField(instance, "home_world")
	instance.Language = gooq.NewStringField(instance, "language")
	instance.Constraints = newSpeciesConstraints()
	return instance
}

func (t *species) As(alias string) gooq.Selectable {
	instance := newSpecies()
	instance.alias = null.StringFrom(alias)
	return instance
}

func (t *species) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*model.Species, error) {
	result := model.Species{}
	if err := gooq.ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *species) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]model.Species, error) {
	results := []model.Species{}
	if err := gooq.ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

var Species = newSpecies()
