// THIS FILE WAS AUTOGENERATED - ANY EDITS TO THIS WILL BE LOST WHEN IT IS REGENERATED

{{ $schema := .Schema }}
package {{ .Package }}

import (
	"time"

	"github.com/google/uuid"
	"gopkg.in/guregu/null.v3"

  "github.com/lumina-tech/lumina/apps/server/pkg/gooq/gooq"
)

{{ range $_, $table := .Tables -}}
type {{ snakeToCamelID $table.Name }} struct {
  {{ range $_, $f := $table.Fields -}}
  {{ snakeToCamelID $f.Name }} {{ $f.Type }} `db:"{{ $f.Name }}" json:"{{ $f.Name }}"`
  {{ end }}
}

type {{ toLower $table.Name }}_constraints struct {
  {{ range $_, $f := $table.Constraints -}}
  {{ toUpper $f.Name }} gooq.DatabaseConstraint
  {{ end }}
}

type {{ toLower $table.Name }} struct {
  {{ range $_, $f := $table.Fields -}}
  {{ toUpper $f.Name }} gooq.{{ $f.GooqType }}Field
  {{ end }}
  CONSTRAINTS *{{ toLower $table.Name }}_constraints
  alias string
}

func new{{ snakeToCamelID $table.Name }}Constraints() *{{ toLower $table.Name }}_constraints {
  constraints := &{{ toLower $table.Name }}_constraints{}
  {{ range $_, $f := $table.Constraints -}}
  constraints.{{ toUpper $f.Name }} = gooq.DatabaseConstraint{"{{$f.Name}}", []string{{$f.Columns}} }
  {{ end -}}
  return constraints
}

func new{{ snakeToCamelID $table.Name }}() *{{ toLower $table.Name }} {
  instance := &{{ toLower $table.Name }}{}
  {{ range $_, $f := $table.Fields -}}
  instance.{{ toUpper $f.Name }} = gooq.{{ $f.GooqType }}(instance, "{{ toUpper $f.Name }}")
  {{ end -}}
  instance.CONSTRAINTS = new{{ snakeToCamelID $table.Name }}Constraints()
  return instance
}

func (t *{{ toLower $table.Name }}) IsSelectable() {}

func (t *{{ toLower $table.Name }}) Name() string {
  return gooq.Qualified("{{ $schema }}", "{{ toLower $table.Name }}")
}

func (t *{{ toLower $table.Name }}) As(a string) gooq.Selectable {
  instance := new{{ snakeToCamelID $table.Name }}()
  instance.alias = a
  return instance
}

func (t *{{ toLower $table.Name }}) Alias() string {
  return t.alias
}

func (t *{{ toLower $table.Name }}) MaybeAlias() string {
  if t.alias == "" {
    return "{{ toLower $table.Name }}"
  } else {
    return t.alias
  }
}

func (t *{{ toLower $table.Name }}) ScanRow(
	db gooq.DBInterface, stmt gooq.Fetchable,
) (*{{ snakeToCamelID $table.Name }}, error) {
	result := {{ snakeToCamelID $table.Name }}{}
	if err := ScanRow(db, stmt, &result); err != nil {
		return nil, err
	}
	return &result, nil
}

func (t *{{ toLower $table.Name }}) ScanRows(
	db gooq.DBInterface, stmt gooq.Fetchable,
) ([]{{ snakeToCamelID $table.Name }}, error) {
	results := []{{ snakeToCamelID $table.Name }}{}
	if err := ScanRows(db, stmt, &results); err != nil {
		return nil, err
	}
	return results, nil
}

func (t *{{ toLower $table.Name }}) ToSlicesOfPointers(
	slices []{{ snakeToCamelID $table.Name }},
) []*{{ snakeToCamelID $table.Name }} {
	result := make([]*{{ snakeToCamelID $table.Name }}, len(slices))
	for index := range slices {
		result[index] = &slices[index]
	}
	return result
}

var {{ toUpper $table.Name }} = new{{ snakeToCamelID $table.Name }}()
{{ end }}
